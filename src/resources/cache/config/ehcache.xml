<?xml version="1.0" encoding="UTF-8"?>
<ehcache:config xmlns:ehcache="http://www.ehcache.org/v3"
	xmlns:jcache="http://www.ehcache.org/v3/jsr107">

	<!-- OPTIONAL services to be managed and lifecycled by the CacheManager -->
	<ehcache:service>
		<!-- One element in another namespace, using our JSR-107 extension as an 
			example here -->
		<jcache:defaults>
			<jcache:cache name="invoices" template="myDefaultTemplate" />
		</jcache:defaults>
	</ehcache:service>

	<!-- OPTIONAL A <cache> element defines a cache, identified by the mandatory 
		'alias' attribute, to be managed by the CacheManager -->
	<ehcache:cache alias="productCache">

		<!-- OPTIONAL, defaults to java.lang.Object The FQCN of the type of keys 
			K we'll use with the Cache<K, V> -->
		<ehcache:key-type copier="org.ehcache.internal.copy.SerializingCopier">java.lang.String</ehcache:key-type>

		<!-- OPTIONAL, defaults to java.lang.Object The FQCN of the type of values 
			V we'll use with the Cache<K, V> -->
		<ehcache:value-type copier="org.ehcache.internal.copy.SerializingCopier">java.lang.String</ehcache:value-type>

		<!-- OPTIONAL, defaults to no expiry Entries to the Cache can be made to 
			expire after a given time -->
		<ehcache:expiry>
			<!-- time to idle, the maximum time for an entry to remain untouched Entries 
				to the Cache can be made to expire after a given time other options are: 
				* <ttl>, time to live; * <class>, for a custom Expiry implementation; or 
				* <none>, for no expiry -->
			<ehcache:tti unit="minutes">20</ehcache:tti>
		</ehcache:expiry>

		<!-- OPTIONAL, defaults to no vetoing An eviction veto, which lets you 
			control what entries should only get evicted as last resort FQCN of a org.ehcache.config.EvictionVeto 
			implementation -->
		<!-- ehcache:eviction-veto>com.pany.ehcache.MyEvictionVeto</ehcache:eviction-veto> -->

		<!-- OPTIONAL, defaults to no prioritization An eviction prioritizer, which 
			will be used to order the random sample picked for eviction FQCN of a org.ehcache.config.EvictionPrioritizer 
			implementation or either values from the enum org.ehcache.config.Eviction.Prioritizer: 
			LRU, LFU or FIFO -->
		<ehcache:eviction-prioritizer>LFU</ehcache:eviction-prioritizer>

		<!-- OPTIONAL, Let's you configure your cache as a "cache-through", i.e. 
			a Cache that uses a CacheLoaderWriter to load on misses, and write on mutative 
			operations. -->
		<ehcache:integration>
			<!-- OPTIONAL The FQCN implementing org.ehcache.spi.loaderwriter.CacheLoaderWriter -->
			<!-- ehcache:loaderwriter>
				<ehcache:class>com.pany.ehcache.integration.ProductCacheLoaderWriter</ehcache:class> -->
				<!-- Any further elements in another namespace -->
			<!--  </ehcache:loaderwriter> -->
		</ehcache:integration>

		<!-- The maximal number of entries to be held in the Cache, prior to eviction 
			starting -->
		<ehcache:heap size="200" unit="entries" />

		<!-- OPTIONAL Any further elements in another namespace -->
	</ehcache:cache>

	<!-- OPTIONAL A <cache-template> defines a named template that can be used 
		be <cache> definitions in this same file They have all the same property 
		as the <cache> elements above -->
	<ehcache:cache-template name="myDefaultTemplate">
		<ehcache:expiry>
			<ehcache:none />
		</ehcache:expiry>
		<ehcache:eviction-prioritizer>LRU</ehcache:eviction-prioritizer>
		<!-- OPTIONAL Any further elements in another namespace -->
	</ehcache:cache-template>

	<!-- A <cache> that uses the template above by referencing the cache-template's 
		name in the usesTemplate attribute: -->
	<ehcache:cache alias="customerCache" usesTemplate="myDefaultTemplate">
		<!-- Adds the key and value type configuration -->
		<ehcache:key-type>java.lang.String</ehcache:key-type>
		<ehcache:value-type>java.lang.String</ehcache:value-type>

		<!-- Overwrites the capacity limit set by the template to a new value -->
		<ehcache:heap size="200" unit="entries" />
	</ehcache:cache>

</ehcache:config>

